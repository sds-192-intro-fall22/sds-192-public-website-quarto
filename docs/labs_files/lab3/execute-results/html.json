{
  "hash": "d65d82a3dfe750c4070d0ce5e7cc5e08",
  "result": {
    "markdown": "---\ntitle: \"Lab 3: Plotting Frequencies and Distributions\"\nauthor: \"Lindsay Poirier\"\nformat:\n  html:\n    code-fold: false\nexecute: \n  echo: true\nknitr:\n  opts_chunk: \n    message: false\neditor: source\n---\n\n## Introduction\n\nThe goal of this lab is to provide you with practice in producing data visualizations that help to answer a research question.\n\n### Learning Goals\n\n-   Produce and interpret univariate plots\n\n-   Produce and interpret multivariate plots\n\n-   Summarize and interpret variation and co-variation from observation of plots\n\n-   Contextualize plots with descriptive labels and titles\n\n## Review of Key Terms\n\nMultivariate Plots\n\n:   Plots that summarize and visualize the distribution and relationship between multiple variables\n\nUnivariate Plots\n\n:   Plots that summarize and visualize the distribution of a single variable\n\nVariation\n\n:   The degree to which categorical or numeric values vary across data\n\n## Spotify Dataset\n\nToday, we are prioritizing **joy**! Our research question will be: How joyful are popular Spotify playlists in my favorite music genre?\n\nThe music feature from Spotify's data that serves as a measure of joy is called *valence*. This is the description from their API documentation for valence:\n\n> A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n(Pretty vague if you ask me, but today we'll go with it.)\n\n## Setting Up Your Environment\n\n::: callout-tip\nToday's set-up is a little more complicated than usual, so **be sure to take it slow** and ask questions as they come up!\n:::\n\n1.  Install the Spotify R package by entering the following into your Console: `install.packages(\"spotifyr\")`\n\n2.  Log-in to Spotify's Developer Dashboard [here](https://developer.spotify.com/dashboard/). If you have a Spotify account, you can log-in with that account. Otherwise, you should create one. \n\n3.  Click the 'Create an App' button to create an app named \"SDS 192 Class Project\". You can indicate that this is a \"Project for SDS 192 class\"\n\n    ![This is where to click to create an app.](img/create-app.png){width=\"800\"}\n\n    ![This is the form that you will fill out when you click 'Create an app'](img/app-form.png){width=\"500\"}\n\n4.  Click Edit Settings. Under the heading **Redirect URIs** copy and paste this URL: http://localhost:1410/, and click Add. Scroll to the bottom of the window and click Save. This is going to allow us to authenticate our Spotify accounts through our local computers.\n\n    ![Click here to Edit Settings](img/app-settings.png){width=\"800\"}\n\n    ![This is where you will paste the redirect link.](img/redirect.png){width=\"500\"}\n\n    ![Be sure to to click 'Add' after pasting the URL and to scroll down and click 'Save'](img/save-app-settings.png){width=\"500\"}\n\n5.  Click the Users and Access button. Scroll down to Add New User, and add your name and the email address associated with your Spotify account. Click Add.\n\n    ![This is where to click for Users and Access.](img/app-users.png){width=\"800\"}\n\n    ![This is where to add a user.](img/add-app-user.png){width=\"500\"}\n\n    ![You should see this if you've successfully added a user.](img/added-app-user.png){width=\"500\"}\n\n6.  Click \"Show Client Secret\". Copy **client id** and **secret** into the code below, **remove the comments in the code chunk**, and then run the code chunk.\n\n    ![This is where you will see the client ID and secret. I've blocked it out here because these should be treated as passwords and not shared.](img/spotify-secret.png){width=\"500\"}\n\n::: {.cell document='show'}\n\n```{.r .cell-code}\nlibrary(spotifyr)\n# DON'T FORGET TO REMOVE THE COMMENTS BELOW. THIS MEANS THAT YOU WILL NEED TO REMOVE THE '#' IN FRONT OF EACH OF THE FOLLOWING LINES.\n\n# id <- 'FILL CLIENT ID HERE'\n# secret <- 'FILL CLIENT SECRET HERE'\n# Sys.setenv(SPOTIFY_CLIENT_ID = id)\n# Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)\n```\n:::\n\n7.  Navigate to <https://open.spotify.com/>. Below replace `poiril` with your Spotify username. This is the ID that appears in the upper right hand corner when you log into your Spotify account (not your developer account.)\n\n    ![This is where you will find the Spotify username.](img/spotify-user.png){width=\"700\"}\n\n8.  Search Spotify for your favorite music genre and select three *playlists* from the search. Note that this code will only work for playlists, and playlists may be a ways down in the search results.\n\n    ![Make sure to scroll down to Playlists when running your search!](img/playlists.png){width=\"800\"}\n\n9.  When you click on a playlist, notice the URL in the navigation bar of your web browser. It should look something like spotify.com/playlist/LONG_STRING_OF_CHARACTERS. Copy the long string of characters at the end of the URL, and paste it into the function below. Your characters should replace the example playlist I've added: `7ryj1GwAWYUY36VQd4uXoq`.\n\n    ![When you click on a playlist, you'll see the long string of characters here.](img/spotify-string.png){width=\"800\"}\n\n10. Repeat this for the other two playlists, replacing my other examples. Then run the code.\n\n::: {.cell document='show'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nspotify_playlists <- get_playlist_audio_features(\n  username = \"poiril\",\n  playlist_uris = c(\"7ryj1GwAWYUY36VQd4uXoq\",\n                    \"3DYUw0nHB9o8tLZKQup4zp\",\n                    \"37i9dQZF1DXdOEFt9ZX0dh\"),\n  authorization = get_spotify_access_token()\n) |>\n  select(-c(track.artists, \n            track.available_markets, \n            track.album.artists, \n            track.album.available_markets, \n            track.album.images))\n```\n:::\n\n## Data Analysis\n\nIn the exercises below, you will create a series of plots that will enable us to compare the joyfulness of the three playlists you've selected.\n\nI encourage you to take a look at the `spotify_playlists` data frame in your environment. You'll note that each row in the dataset is a song/track from one of the the three playlists you selected (unique ID would be `track.id`), and columns provide information about that song (such as the `track.name`, the playlist it is a part of, its `key`, `loudness`, `danceability`, and `acousticness`). We can produce some pretty cool visualizations from this data. For instance check out how we might compare the relationship between the `energy` and `acousticness` of songs across the three selected playlists.\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_playlists |>\n  ggplot(aes(x = acousticness, y = energy)) +\n  geom_point(alpha = 0.5, size = 0.5) +\n  coord_flip() +\n  facet_wrap(vars(playlist_name)) +\n  labs(title = \"Acousticness and Energy of Songs in Classic Rock Spotify Playlists, 2022\",\n       x = \"Acousticness\", \n       y = \"Energy\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](lab3_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: callout-tip\nYou might use this plot as a starting template for the plots you are going to create below!\n:::\n\nWe're going to start our analysis with univariate plotting. Specifically, we are going to produce data visualizations that count the number of observations in a dataset that fall into specific groupings. When grouping observations by a categorical variable, we will produce a bar plot. When grouping observations into intervals of a numeric variable, we will produce a histogram. Remember when labeling that these plots visualize *frequency*.\n\n::: callout-warning\nKeep in mind that all plots should have 5 contextual details represented in titles or labels:\n\n-   The data's unit of observation\n\n-   The variables represented\n\n-   Any filters applied\n\n-   The geographic scope of the data\n\n-   The temporal scope of the data\n:::\n\n###### Question\n\n::: question\nHow many songs are in each playlist? Create a plot to visualize this, and order the results by the number of songs. Be sure to give it a descriptive title and labels covering all 5 essential components of data context.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nWhat is the distribution of valence across all of the songs (in intervals of 0.1 valence)? Create a histogram to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n####### \n\nLet's move on to some multivariate plotting. Remember that we can add further variables to a plot via a number of different aesthetics (e.g. color: `fill=` or `col=`; size: `size=`; position: `x=` or `y=`, small multiples: `+ facet_wrap(vars(...))` ). Whenever we add further data to a plot, we should be on the lookout for overplotting.\n\n###### Question\n\n::: question\nWhat is the distribution of valence across all of the songs (in intervals of 0.1 valence) *in each playlist*? Create a histogram to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nWhat are differences in the summary statistics (max, min, median, etc.) of the valence of songs in each playlist? Create grouped boxplot to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nDo happier songs tend to be more danceable *in each playlist*? Create a plot to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context. Also be sure to adjust your plot to address overplotting.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nDo songs composed with the minor or major `mode_name` tend to be happier *in each playlist*? Create a plot to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nDo happier songs tend to have a higher tempo across all playlists? What role might the song's mode play? Create a plot to visualize this. Be sure to give it a descriptive title and labels covering all 5 essential components of data context. Also be sure to adjust your plot to address overplotting.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Create plot here\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n###### Question\n\n::: question\nBased on all of your plots, summarize what you learned about the joyfulness of these three playlists below.\n:::\n\n####### \n\n::: callout-caution\n## Ethical Considerations\n\nCheck out [this article](https://www.vox.com/culture/22814121/spotify-wrapped-2021-algorithm-data-privacy) documenting ethical concerns regarding Spotify's data collection practices. Should we be concerned about the assumptions that Spotify makes about us based on our music streaming habits? What about the way they curate music for us? What are some of the social consequences to this form of user surveillance? Share your ideas on our \\`sds-192-discussions\\` Slack channel.\n:::",
    "supporting": [
      "lab3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}