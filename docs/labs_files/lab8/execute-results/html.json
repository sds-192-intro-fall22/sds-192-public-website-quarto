{
  "hash": "72dc644ff96a2dbe976b0efe299d296c",
  "result": {
    "markdown": "---\ntitle: \"Lab 8: Programming with Data\"\nauthor: \"Lindsay Poirier\"\nbibliography: ../IntroDS.bib\nformat:\n  html:\n    code-fold: false\n    df-print: paged\nexecute: \n  echo: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\neditor: source\n---\n\n\n## Introduction\n\nIn this lab, we will program some custom `R` functions that allow us to analyze data related to medical conflicts of interest. Specifically, we will determine which ten Massachusetts-based doctors received the most money from pharmaceutical or medical device manufacturers in 2021. Then we will leverage our custom functions to produce a number of tables and plots documenting information about the payments made to each of these doctors. In doing so, we will update a similar analysis produced by ProPublica in 2018 called [*Dollars for Docs*](https://projects.propublica.org/docdollars/).\n\n### Learning Goals\n\n-   Write custom `R` functions \n-   Iterate a function over the values in a vector, using the family of map functions\n-   Practice data cleaning and wrangling\n\n## Review of Key Terms\n\n::: callout-tip\nYou may wish to reference this [purrr Cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf) when completing this lab.\n:::\n\nFunction\n\n:   a series of statements that returns a value or performs a task \n\nIteration \n\n:   repeating a task over a series of values, vectors, or lists\n\n## CMS's Open Payments Dataset\n\nIn 2010, the the Physician Payments Sunshine Act (2010) was passed, requiring medical drug and device manufacturers to disclose payments and other transfers of value made to physicians, non-physician practitioners, and teaching hospitals. This law was put into place to promote transparency in our medical system - enabling the U.S. government and citizens to monitor for potential medical conflicts of interest. \n\nToday, every time a drug or medical device manufacturer makes a payment to a covered recipient, they must disclose the nature of that payment and the amount to the U.S. Centers for Medicare & Medicaid. Data about payments is then aggregated, reviewed by (and sometimes disputed by) recipients, corrected, and then published as an open government dataset. \n\nDefinitions for what counts as a reporting entity, a covered recipient, and a reportable activity have been expanding since the passing of the Physician Payments Sunshine Act as legislators have raised concerns over the degree of transparency of diversifying financial arrangements in the healthcare system. In 2020, the first settlement for violations to the Sunshine Act was announced, requiring Medtronic Inc. to pay $9.2 million to resolve allegations for failure to report. This served as a signal that enforcement is ramping up in the coming years. In 2022, the state of California passed a law requiring that medical practitioners disclose to patients that this data resource exists. \n\n## Setting Up Your Environment\n\n1. Run the code below to load today's data frames into your environment. \n\n\n::: {.cell document='show'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(RColorBrewer)\nopen_payments_original <- read_csv(\"https://raw.githubusercontent.com/sds-192-intro-fall22/sds-192-public-website-quarto/main/website/data/open_payments_ma.csv\") |>\n  select(covered_recipient_npi,\n         covered_recipient_first_name:covered_recipient_last_name,\n         applicable_manufacturer_or_applicable_gpo_making_payment_id,\n         applicable_manufacturer_or_applicable_gpo_making_payment_name,\n         recipient_city,\n         recipient_state,\n         covered_recipient_specialty_1,\n         total_amount_of_payment_usdollars,\n         indicate_drug_or_biological_or_device_or_medical_supply_1,\n         product_category_or_therapeutic_area_1,\n         name_of_drug_or_biological_or_device_or_medical_supply_1,\n         date_of_payment,\n         nature_of_payment_or_transfer_of_value,\n         number_of_payments_included_in_total_amount,\n         form_of_payment_or_transfer_of_value,\n         dispute_status_for_publication,\n         payment_publication_date) |>\n  filter(!is.na(covered_recipient_npi))\n```\n:::\n\n\n## Cleaning up this Data Frame\n\nEventually we are going to plot some timelines of payments to specific doctors, and we will need the `date_of_payment` column to be in a date-time format to do so. Right now however, these columns are strings. To get started with cleaning up this dataset, let's convert the date columns in `open_payments_original` to a date-time format. \n\n###### Question\n\n::: question\n\nWrite code to convert the `date_of_payment` and the `payment_publication_date` column to date-time format. You should first determine the format of the date in `date_of_payment` and `payment_publication_date` and then reference the [lubridate](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_lubridate.pdf) to determine the corresponding function for parsing that date format. Finally, you will mutate the two columns. \n\n> Optional challenge: Rather than mutating each column, see if you can `mutate()` `across()` the two columns to complete this step. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment below to write code to convert to date-time format here. \n\n# open_payments_dates_cleaned <- open_payments_original |>\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\nTo confirm that we've done this right, we can check whether both of the dates are in the date-time format. \n\n###### Question\n\n::: question\n\nThe `is.Date` function returns `TRUE` if a vector is in date-time format, and `FALSE` if it is not. Below, I've selected the two columns in `open_payments` that contain the word \"date\" in the column header. Determine which `map()` function to use in order to return a **vector** that indicates whether these columns are in a date-time format. If you've done everything correctly, you should get the output below. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the appropriate map function below\n\nopen_payments_dates_cleaned |>\n  select(contains(\"date\")) |>\n  _____(is.Date)\n```\n:::\n\n::: {.cell document='solutions'}\n::: {.cell-output .cell-output-stdout}\n```\n         date_of_payment payment_publication_date \n                    TRUE                     TRUE \n```\n:::\n:::\n\n\n#######\n\n::: callout-tip\nCheck out what happens if you swap out your map function above for `map`, `map_chr`, or `map_int`. Can you figure out the relationship between these values and the original values?\n:::\n\nIt's important to note that the unit of observation in this dataset is not one medical practitioner, and it is not one manufacturer. Instead it is one payment from a manufacturer to a medical practitioner. That means that a medical practitioner can appear multiple times in the dataset if they've received multiple payments, and a medical drug or device manufacturer can appear multiple times in the dataset if they've disbursed multiple payments. We can identify medical practitioners with the `covered_recipient_npi` column and manufacturers with the `applicable_manufacturer_or_applicable_gpo_making_payment_id` column. \n\n...but we want to know more than just the ID of a medical practitioner. To identify which doctors are receiving the most money, we also want to know that practitioner's name, location, specialty, etc. Because practitioners' names are manually entered into a database every time a payment is made to them, sometimes the formatting of a practitioner's name entered for one payment can differ from how that same practitioner's name is formatted when entered for another payment. The same goes for other variables related to that practitioner. For instance, check out how the capitalization differs for the practitioner below. In some cases, there is a middle initial, while in others, there is a full middle name; in some cases, the practitioner's name is all capitalized, and in other cases it is not. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_payments_dates_cleaned |>\n  filter(covered_recipient_npi == 1003040676) |>\n  select(covered_recipient_first_name, covered_recipient_middle_name, covered_recipient_last_name)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"covered_recipient_first_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"covered_recipient_middle_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"covered_recipient_last_name\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"CHARLES\",\"2\":\"NA\",\"3\":\"RESOR\"},{\"1\":\"CHARLES\",\"2\":\"D.\",\"3\":\"RESOR\"},{\"1\":\"CHARLES\",\"2\":\"D.\",\"3\":\"RESOR\"},{\"1\":\"Charles\",\"2\":\"Donohue\",\"3\":\"Resor\"},{\"1\":\"CHARLES\",\"2\":\"D\",\"3\":\"RESOR\"},{\"1\":\"CHARLES\",\"2\":\"D\",\"3\":\"RESOR\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThis issue with formatting exists across this entire dataset. To ensure that similar entities appear in the right buckets when we aggregate the data, we are going to standardize capitalization across the whole dataset. We're also going to leave out the practitioner's middle initial since it is not always included (or included in the same way).\n\n###### Question\n\n::: question\n\nWrite code to `mutate` `across` all *character* columns such that strings in these columns are converted to **title case**. Title case refers to casing where the first letter in each word is capitalized and all other letters are lowercase.  Strings can be converted to title case with the function `str_to_title`. \n\nAfter you've done this, mutate a new column called `covered_recipient_full_name` that concatenates (hint: i.e. `paste()`) together `covered_recipient_first_name` and `covered_recipient_last_name`. \n\nStore the resulting data frame in `open_payments`. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment below to clean up strings\n\n# open_payments <- open_payments_dates_cleaned |>\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\nAs we saw before, one `covered_recipient_npi` was associated with multiple names if the names were capitalized in some cases and not others. Now that we've standardized the formatting of these names, there ideally should be one full name associated with every `covered_recipient_npi`. Let's compare the length of unique `covered_recipient_npi` values to the length of unique `covered_recipient_full_name` values to check whether this is the case. \n\n###### Question\n\n::: question\n\nWrite a function below called `num_unique`. The function should calculate the length of unique values in the vector passed to the argument `x`. \n\nBelow, I've selected the two columns in `open_payments` that we want to iterate this function over. Determine which `map()` function to use in order to return a **numeric vector** that indicates the length of unique values in each of these columns. If you've done everything correctly, you should get the output below. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_unique <- function(x) {\n # Write function here.\n}\n\nopen_payments |>\n  select(covered_recipient_npi, covered_recipient_full_name) |>\n  _____(_____) # Determine which map function to call here.\n```\n:::\n\n::: {.cell document='solutions'}\n::: {.cell-output .cell-output-stdout}\n```\n      covered_recipient_npi covered_recipient_full_name \n                      11837                       11858 \n```\n:::\n:::\n\n\n#######\n\nNotice that there are still more full names than `covered_recipient_npi`s, which means that certain doctors have multiple names in this dataset. Below I've written some code to calculate the number unique full names listed for each `covered_recipient_npi` and filter to the rows with more than one name. Can you identify some reasons why we might have multiple names listed for this same medical practitioner in this data frame?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_payments |>\n  group_by(covered_recipient_npi) |>\n  mutate(num_names = length(unique(covered_recipient_full_name))) |>\n  ungroup() |>\n  filter(num_names > 1) |>\n  select(covered_recipient_npi, covered_recipient_full_name) |>\n  distinct() |>\n  arrange(desc(covered_recipient_npi))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"covered_recipient_npi\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"covered_recipient_full_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1992991657\",\"2\":\"Lana Schumacher\"},{\"1\":\"1992991657\",\"2\":\"Lana Beal\"},{\"1\":\"1992932453\",\"2\":\"Jessica Allegretti\"},{\"1\":\"1992932453\",\"2\":\"Jessica Ravikoff\"},{\"1\":\"1992712178\",\"2\":\"Pasi Antero Janne\"},{\"1\":\"1992712178\",\"2\":\"Pasi Janne\"},{\"1\":\"1992187132\",\"2\":\"Faiz Bayo-Awoyemi\"},{\"1\":\"1992187132\",\"2\":\"Faiz Bayo Awoyemi\"},{\"1\":\"1982680740\",\"2\":\"Donald Marks\"},{\"1\":\"1982680740\",\"2\":\"Don Marks\"},{\"1\":\"1982655643\",\"2\":\"C. Douglas Evans\"},{\"1\":\"1982655643\",\"2\":\"Charles Evans\"},{\"1\":\"1982655643\",\"2\":\"C Douglas Evans\"},{\"1\":\"1982632006\",\"2\":\"Lucyna Czarnota Dolliver\"},{\"1\":\"1982632006\",\"2\":\"Lucyna Czarnota-Dolliver\"},{\"1\":\"1972661064\",\"2\":\"Marie-Helene Almonor\"},{\"1\":\"1972661064\",\"2\":\"Mariehelene Almonor\"},{\"1\":\"1962851345\",\"2\":\"Jessica St. John\"},{\"1\":\"1962851345\",\"2\":\"Jessica St John\"},{\"1\":\"1962516757\",\"2\":\"Douglas Grogan\"},{\"1\":\"1962516757\",\"2\":\"Dougals Grogan\"},{\"1\":\"1962465070\",\"2\":\"James Obrien\"},{\"1\":\"1962465070\",\"2\":\"James O'brien\"},{\"1\":\"1962437061\",\"2\":\"Annie Abraham\"},{\"1\":\"1962437061\",\"2\":\"Ann Abraham\"},{\"1\":\"1952364523\",\"2\":\"Krzysztof Kacprzak\"},{\"1\":\"1952364523\",\"2\":\"Krxysztof Kacprzak\"},{\"1\":\"1942650700\",\"2\":\"James St Clair\"},{\"1\":\"1942650700\",\"2\":\"James St. Clair\"},{\"1\":\"1942297528\",\"2\":\"M. Donnelly\"},{\"1\":\"1942297528\",\"2\":\"Mary Donnelly\"},{\"1\":\"1942250501\",\"2\":\"Marie-Claire Maroun\"},{\"1\":\"1942250501\",\"2\":\"Marie Claire Maroun\"},{\"1\":\"1922150804\",\"2\":\"Raafat Attia-Hanna\"},{\"1\":\"1922150804\",\"2\":\"Raafat Attia Hanna\"},{\"1\":\"1922101294\",\"2\":\"Thomas O'halloran\"},{\"1\":\"1922101294\",\"2\":\"Thomas O Halloran\"},{\"1\":\"1922040666\",\"2\":\"Yousef Abou-Allaban\"},{\"1\":\"1922040666\",\"2\":\"Yousef Abou Allaban\"},{\"1\":\"1912978644\",\"2\":\"Christopher Bechara\"},{\"1\":\"1912978644\",\"2\":\"Christoph Bechara\"},{\"1\":\"1891018065\",\"2\":\"Christoph Zimmerman\"},{\"1\":\"1891018065\",\"2\":\"Christopher Zimmerman\"},{\"1\":\"1881709111\",\"2\":\"Andreluiz D'avila\"},{\"1\":\"1881709111\",\"2\":\"Andre D'avila\"},{\"1\":\"1881709111\",\"2\":\"Andre Davila\"},{\"1\":\"1861481657\",\"2\":\"Paul Skudder\"},{\"1\":\"1861481657\",\"2\":\"Paul Skudder Jr\"},{\"1\":\"1851573893\",\"2\":\"Stella Lee\"},{\"1\":\"1851573893\",\"2\":\"Estelle Lee\"},{\"1\":\"1851300230\",\"2\":\"Angela Ahuja\"},{\"1\":\"1851300230\",\"2\":\"Angel Ahuja\"},{\"1\":\"1831283118\",\"2\":\"Maria Pilar Elisa Dayaw\"},{\"1\":\"1831283118\",\"2\":\"Maria Dayaw\"},{\"1\":\"1821197641\",\"2\":\"Camille Guzek-Latka\"},{\"1\":\"1821197641\",\"2\":\"Camille Guzek Latka\"},{\"1\":\"1821107269\",\"2\":\"Thomas Odonnell\"},{\"1\":\"1821107269\",\"2\":\"Thomas O'donnell\"},{\"1\":\"1821023912\",\"2\":\"Maria Gorbovitsky\"},{\"1\":\"1821023912\",\"2\":\"Mary Gorbovitsky\"},{\"1\":\"1801887997\",\"2\":\"Shih-Te Wen\"},{\"1\":\"1801887997\",\"2\":\"Shih Te Wen\"},{\"1\":\"1801883806\",\"2\":\"Robert Oleary\"},{\"1\":\"1801883806\",\"2\":\"Robert O'leary\"},{\"1\":\"1801882667\",\"2\":\"Brad Foster\"},{\"1\":\"1801882667\",\"2\":\"Bradley Foster\"},{\"1\":\"1801834395\",\"2\":\"Thirupaimruth Raman\"},{\"1\":\"1801834395\",\"2\":\"Thirupaimaruth Raman\"},{\"1\":\"1780624213\",\"2\":\"William Wyman Fiske\"},{\"1\":\"1780624213\",\"2\":\"William Fiske\"},{\"1\":\"1770594905\",\"2\":\"Richard Traversy\"},{\"1\":\"1770594905\",\"2\":\"Richard Traversy Jr\"},{\"1\":\"1760589147\",\"2\":\"Shiao-Ang Shih\"},{\"1\":\"1760589147\",\"2\":\"Shiao Ang Shih\"},{\"1\":\"1750791380\",\"2\":\"Vicky Thakkar\"},{\"1\":\"1750791380\",\"2\":\"Vick Thakkar\"},{\"1\":\"1750360657\",\"2\":\"David Rishikof\"},{\"1\":\"1750360657\",\"2\":\"Dave Rishikof\"},{\"1\":\"1750357430\",\"2\":\"Ron Alterman\"},{\"1\":\"1750357430\",\"2\":\"Ronnie Alterman\"},{\"1\":\"1730179623\",\"2\":\"Andrew David Simkin\"},{\"1\":\"1730179623\",\"2\":\"Andrew Simkin\"},{\"1\":\"1720005481\",\"2\":\"Kathleen Kirchmeier Kroessler\"},{\"1\":\"1720005481\",\"2\":\"Kathleen Kirchmeier-Kroessler\"},{\"1\":\"1710969050\",\"2\":\"Kala Seetharman\"},{\"1\":\"1710969050\",\"2\":\"Kala Seetharaman\"},{\"1\":\"1710379797\",\"2\":\"Marleny Aquino-Cabrera\"},{\"1\":\"1710379797\",\"2\":\"Marleny Aquino Cabrera\"},{\"1\":\"1700864303\",\"2\":\"James O'holleran\"},{\"1\":\"1700864303\",\"2\":\"James Oholleran\"},{\"1\":\"1699881516\",\"2\":\"Mercedes Von Deck\"},{\"1\":\"1699881516\",\"2\":\"Mercedes Vondeck\"},{\"1\":\"1689197196\",\"2\":\"Nazanin Asvadi\"},{\"1\":\"1689197196\",\"2\":\"Nazanin Hajarol Asvadi\"},{\"1\":\"1689104010\",\"2\":\"Jenny Zhao Cheng\"},{\"1\":\"1689104010\",\"2\":\"Jenny Cheng\"},{\"1\":\"1679554588\",\"2\":\"Matthew Smith\"},{\"1\":\"1679554588\",\"2\":\"Mathew Smith\"},{\"1\":\"1669495602\",\"2\":\"Jon Wee\"},{\"1\":\"1669495602\",\"2\":\"Jonny Wee\"},{\"1\":\"1659471191\",\"2\":\"Maryann Millar\"},{\"1\":\"1659471191\",\"2\":\"Mary Ann Millar\"},{\"1\":\"1639150592\",\"2\":\"Claude Resil\"},{\"1\":\"1639150592\",\"2\":\"Claud Resil\"},{\"1\":\"1629098496\",\"2\":\"Mohamad Och\"},{\"1\":\"1629098496\",\"2\":\"Mohamed Och\"},{\"1\":\"1629044862\",\"2\":\"L. Dolgov\"},{\"1\":\"1629044862\",\"2\":\"L Dolgov\"},{\"1\":\"1629003686\",\"2\":\"Elise Bilodeau Mccarthy\"},{\"1\":\"1629003686\",\"2\":\"Elise Mccarthy\"},{\"1\":\"1619297124\",\"2\":\"Nicole Grossman\"},{\"1\":\"1619297124\",\"2\":\"Nicole Landzberg\"},{\"1\":\"1619045929\",\"2\":\"Bao-Kim Nguyen\"},{\"1\":\"1619045929\",\"2\":\"Bao Kim Nguyen\"},{\"1\":\"1609048909\",\"2\":\"Hector Aguilar\"},{\"1\":\"1609048909\",\"2\":\"Hector Tamez Aguilar\"},{\"1\":\"1598723512\",\"2\":\"Soheil Amin Hanjani\"},{\"1\":\"1598723512\",\"2\":\"Soheil Amin-Hanjani\"},{\"1\":\"1598711160\",\"2\":\"Karl D'silva\"},{\"1\":\"1598711160\",\"2\":\"Karl Dsilva\"},{\"1\":\"1588778476\",\"2\":\"Slavenka Kam Hansen\"},{\"1\":\"1588778476\",\"2\":\"Slavenka Kam-Hansen\"},{\"1\":\"1588722979\",\"2\":\"Adnan El-Amine\"},{\"1\":\"1588722979\",\"2\":\"Adnan El Amine\"},{\"1\":\"1588715882\",\"2\":\"Salvatore Napoli\"},{\"1\":\"1588715882\",\"2\":\"Salvador Napoli\"},{\"1\":\"1588616775\",\"2\":\"Kimberly Mooney Mcnulty\"},{\"1\":\"1588616775\",\"2\":\"Kimberly Mooney-Mcnulty\"},{\"1\":\"1578510392\",\"2\":\"Claude-Laurent Sader\"},{\"1\":\"1578510392\",\"2\":\"Claude Laurent Sader\"},{\"1\":\"1568879294\",\"2\":\"Venugopal Bhattad\"},{\"1\":\"1568879294\",\"2\":\"Venugopal B Bhattad\"},{\"1\":\"1568566420\",\"2\":\"Robert O'brien\"},{\"1\":\"1568566420\",\"2\":\"Robert Obrien\"},{\"1\":\"1568466316\",\"2\":\"Frederick Ruymann\"},{\"1\":\"1568466316\",\"2\":\"Fred Ruymann\"},{\"1\":\"1558532689\",\"2\":\"Allen L Hwang\"},{\"1\":\"1558532689\",\"2\":\"Allen Hwang\"},{\"1\":\"1548227960\",\"2\":\"Christoph Cannon\"},{\"1\":\"1548227960\",\"2\":\"Christopher Cannon\"},{\"1\":\"1538436209\",\"2\":\"Santiago Lozano Calderon\"},{\"1\":\"1538436209\",\"2\":\"Santiago Lozano-Calderon\"},{\"1\":\"1538415526\",\"2\":\"Krzysztof Rosadzinsk\"},{\"1\":\"1538415526\",\"2\":\"Krzysztof Rosadzinski\"},{\"1\":\"1528265824\",\"2\":\"Kathyrn Masselam Hatch\"},{\"1\":\"1528265824\",\"2\":\"Kathryn Masselam Hatch\"},{\"1\":\"1528094372\",\"2\":\"Vanessa Vanstee\"},{\"1\":\"1528094372\",\"2\":\"Vanessa Van Stee\"},{\"1\":\"1528072972\",\"2\":\"Susan Freedman\"},{\"1\":\"1528072972\",\"2\":\"Sue Freedman\"},{\"1\":\"1518915784\",\"2\":\"Maureen Maher\"},{\"1\":\"1518915784\",\"2\":\"Maureen Burns\"},{\"1\":\"1518278449\",\"2\":\"Bianca Thorpe\"},{\"1\":\"1518278449\",\"2\":\"Bianca Caetano\"},{\"1\":\"1518278290\",\"2\":\"Laura Amorese-O'connell\"},{\"1\":\"1518278290\",\"2\":\"Laura Amorese-Oconnell\"},{\"1\":\"1518278290\",\"2\":\"Laura Amorese Fernandez\"},{\"1\":\"1508824475\",\"2\":\"Nina Blumenthal\"},{\"1\":\"1508824475\",\"2\":\"Nina Carol Blumenthal\"},{\"1\":\"1508437492\",\"2\":\"Maria Alejandra Luna Cuadros\"},{\"1\":\"1508437492\",\"2\":\"Maria Luna Cuadros\"},{\"1\":\"1508021544\",\"2\":\"Jedsian Cheng\"},{\"1\":\"1508021544\",\"2\":\"Jed-Sian Cheng\"},{\"1\":\"1497740351\",\"2\":\"Clifford Prestia\"},{\"1\":\"1497740351\",\"2\":\"Cliff Prestia\"},{\"1\":\"1487975157\",\"2\":\"Ting Xu\"},{\"1\":\"1487975157\",\"2\":\"Ting Yu Xu\"},{\"1\":\"1487693479\",\"2\":\"Lee Silk\"},{\"1\":\"1487693479\",\"2\":\"Lee Scott Silk\"},{\"1\":\"1487692786\",\"2\":\"Feroze-Ud-Din Mahmood\"},{\"1\":\"1487692786\",\"2\":\"Feroze Ud Din Mahmood\"},{\"1\":\"1477609923\",\"2\":\"Amir Mohsen Mahoozi\"},{\"1\":\"1477609923\",\"2\":\"Amir Mahoozi\"},{\"1\":\"1477596799\",\"2\":\"K V R Mohan Rao\"},{\"1\":\"1477596799\",\"2\":\"Kvr Mohan Rao\"},{\"1\":\"1477596799\",\"2\":\"K.v.r Mohan Rao\"},{\"1\":\"1477043610\",\"2\":\"Sneha Shah\"},{\"1\":\"1477043610\",\"2\":\"Sneha Bavaji\"},{\"1\":\"1447248042\",\"2\":\"Ann Marie Joyce\"},{\"1\":\"1447248042\",\"2\":\"Ann Joyce\"},{\"1\":\"1437413242\",\"2\":\"Jerry Chi Chuan Fang\"},{\"1\":\"1437413242\",\"2\":\"Jerry Fang\"},{\"1\":\"1437307907\",\"2\":\"Jessica Erdmann Sager\"},{\"1\":\"1437307907\",\"2\":\"Jessica Erdmann-Sager\"},{\"1\":\"1437118627\",\"2\":\"Mary-Ellen Taplin\"},{\"1\":\"1437118627\",\"2\":\"Maryellen Taplin\"},{\"1\":\"1427499615\",\"2\":\"Jaeyoung Lee\"},{\"1\":\"1427499615\",\"2\":\"Jae Lee\"},{\"1\":\"1427365444\",\"2\":\"Bernadete Therriault Campos\"},{\"1\":\"1427365444\",\"2\":\"Bernadete Campos\"},{\"1\":\"1427056795\",\"2\":\"Kelly Ocallahan\"},{\"1\":\"1427056795\",\"2\":\"Kelly O Callahan\"},{\"1\":\"1417959610\",\"2\":\"M. Wajid Baig\"},{\"1\":\"1417959610\",\"2\":\"M Wajid Baig\"},{\"1\":\"1407803299\",\"2\":\"Vani Reddi\"},{\"1\":\"1407803299\",\"2\":\"Vani Sree Reddi\"},{\"1\":\"1396056495\",\"2\":\"Josie Pena-Gomez\"},{\"1\":\"1396056495\",\"2\":\"Josie Pena Gomez\"},{\"1\":\"1376525063\",\"2\":\"Gloriane Afonso-Fede\"},{\"1\":\"1376525063\",\"2\":\"Gloriane Afonso Fede\"},{\"1\":\"1376505222\",\"2\":\"Gloria Moussa Gabour\"},{\"1\":\"1376505222\",\"2\":\"Gloria Moussa-Gabour\"},{\"1\":\"1366440794\",\"2\":\"Mohamad El Zaru\"},{\"1\":\"1366440794\",\"2\":\"Mohamad El-Zaru\"},{\"1\":\"1356401871\",\"2\":\"Domenic D'angelo\"},{\"1\":\"1356401871\",\"2\":\"Domenic Dangelo\"},{\"1\":\"1326149741\",\"2\":\"Colette Haag Rickert\"},{\"1\":\"1326149741\",\"2\":\"Colette Haag-Rickert\"},{\"1\":\"1326085366\",\"2\":\"Michelle O'donoghue\"},{\"1\":\"1326085366\",\"2\":\"Michelle Odonoghue\"},{\"1\":\"1306168315\",\"2\":\"Rosa Rincon - Rivero\"},{\"1\":\"1306168315\",\"2\":\"Rosa Rincon-Rivero\"},{\"1\":\"1295723724\",\"2\":\"M. Marshall\"},{\"1\":\"1295723724\",\"2\":\"Margaret Marshall\"},{\"1\":\"1285690479\",\"2\":\"Brandon Earp\"},{\"1\":\"1285690479\",\"2\":\"Branden Earp\"},{\"1\":\"1275570228\",\"2\":\"Lori Michelle Laffel\"},{\"1\":\"1275570228\",\"2\":\"Lori Laffel\"},{\"1\":\"1265424758\",\"2\":\"Stephanie Paris-Whitney\"},{\"1\":\"1265424758\",\"2\":\"Stephanie Paris Whitney\"},{\"1\":\"1255308672\",\"2\":\"Young-Ho Oh\"},{\"1\":\"1255308672\",\"2\":\"Young Oh\"},{\"1\":\"1245694645\",\"2\":\"Jacquelyn Dunahoe\"},{\"1\":\"1245694645\",\"2\":\"Jacquelyn Holt\"},{\"1\":\"1245642438\",\"2\":\"Kayla O Malley\"},{\"1\":\"1245642438\",\"2\":\"Kayla O'malley\"},{\"1\":\"1245346162\",\"2\":\"Lilian Mikael\"},{\"1\":\"1245346162\",\"2\":\"Lily Mikael\"},{\"1\":\"1225010176\",\"2\":\"Robert Schiffman\"},{\"1\":\"1225010176\",\"2\":\"Robert Schiffmann\"},{\"1\":\"1215976741\",\"2\":\"Linda Brown\"},{\"1\":\"1215976741\",\"2\":\"Linda Farnsworth Brown\"},{\"1\":\"1205179777\",\"2\":\"Narjust Duma\"},{\"1\":\"1205179777\",\"2\":\"Narjust Perez Florez\"},{\"1\":\"1184682759\",\"2\":\"Deepthi Desilva\"},{\"1\":\"1184682759\",\"2\":\"Deepthi De Silva\"},{\"1\":\"1184614414\",\"2\":\"Agnes Virga\"},{\"1\":\"1184614414\",\"2\":\"Aggy Virga\"},{\"1\":\"1174510465\",\"2\":\"Kimberly Browne-Martin\"},{\"1\":\"1174510465\",\"2\":\"Kimberly Browne Martin\"},{\"1\":\"1154847945\",\"2\":\"Ayita Ray\"},{\"1\":\"1154847945\",\"2\":\"Ray Ayita\"},{\"1\":\"1144207408\",\"2\":\"Michael Paasche-Orlow\"},{\"1\":\"1144207408\",\"2\":\"Michael Paasche Orlow\"},{\"1\":\"1134322456\",\"2\":\"Lawerence Baitch\"},{\"1\":\"1134322456\",\"2\":\"Lawrence Baitch\"},{\"1\":\"1124414958\",\"2\":\"Areen Al-Taie\"},{\"1\":\"1124414958\",\"2\":\"Areen Altaie\"},{\"1\":\"1093821092\",\"2\":\"Nora Schwartz-Martin\"},{\"1\":\"1093821092\",\"2\":\"Nora Schwartz Martin\"},{\"1\":\"1093741530\",\"2\":\"Maura Trail-O'brien\"},{\"1\":\"1093741530\",\"2\":\"Maura Trail Obrien\"},{\"1\":\"1083719371\",\"2\":\"Cheryl Depalo Jost\"},{\"1\":\"1083719371\",\"2\":\"Cheryl Depaolo Jost\"},{\"1\":\"1083096358\",\"2\":\"Syed Owais\"},{\"1\":\"1083096358\",\"2\":\"Syed M Khurram Owais\"},{\"1\":\"1073595260\",\"2\":\"Aboualkheir Alzaim\"},{\"1\":\"1073595260\",\"2\":\"Aboualkhe Alzaim\"},{\"1\":\"1073567749\",\"2\":\"Farrokh Khajavi-Noori\"},{\"1\":\"1073567749\",\"2\":\"Farrokh Khajavi Noori\"},{\"1\":\"1073521753\",\"2\":\"Stephen Kajencki\"},{\"1\":\"1073521753\",\"2\":\"S. Kajencki\"},{\"1\":\"1073503603\",\"2\":\"Alexandra Kimball\"},{\"1\":\"1073503603\",\"2\":\"Alexandria Kimball\"},{\"1\":\"1063471126\",\"2\":\"S David Miller\"},{\"1\":\"1063471126\",\"2\":\"S Miller\"},{\"1\":\"1053755611\",\"2\":\"Margo Rockwell\"},{\"1\":\"1053755611\",\"2\":\"Margo Stevenson\"},{\"1\":\"1053368324\",\"2\":\"Rebecca Osullivan Hunnewell\"},{\"1\":\"1053368324\",\"2\":\"Rebecca Osullivan-Hunnewell\"},{\"1\":\"1033472352\",\"2\":\"Erin O'shea\"},{\"1\":\"1033472352\",\"2\":\"Erin O'shea Paudel\"},{\"1\":\"1033194048\",\"2\":\"Paul D'ambrosio\"},{\"1\":\"1033194048\",\"2\":\"Paul Dambrosio\"},{\"1\":\"1033169610\",\"2\":\"Khalilull Khatri\"},{\"1\":\"1033169610\",\"2\":\"Khalil Khatri\"},{\"1\":\"1023454279\",\"2\":\"Rahman Fareed\"},{\"1\":\"1023454279\",\"2\":\"Fareed Riyaz\"},{\"1\":\"1023281532\",\"2\":\"Deborah Jean Pedersen\"},{\"1\":\"1023281532\",\"2\":\"Deborah Pedersen\"},{\"1\":\"1023006525\",\"2\":\"Peggy Mentor Saint Croix\"},{\"1\":\"1023006525\",\"2\":\"Peggy Mentor\"},{\"1\":\"1013356971\",\"2\":\"Yun- Ting Eric Yeh\"},{\"1\":\"1013356971\",\"2\":\"Yun-Ting Yeh\"},{\"1\":\"1003848532\",\"2\":\"John Joseph Looney\"},{\"1\":\"1003848532\",\"2\":\"John Looney\"},{\"1\":\"1003367145\",\"2\":\"Melda Gerow\"},{\"1\":\"1003367145\",\"2\":\"Melda Esendal\"},{\"1\":\"1003260761\",\"2\":\"Ellie Sader\"},{\"1\":\"1003260761\",\"2\":\"Elie Sader\"},{\"1\":\"1003229097\",\"2\":\"Kiran Agarwal-Harding\"},{\"1\":\"1003229097\",\"2\":\"Kiran Agarwal Harding\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nBecause of these issues, it is important that we use the `covered_recipient_npi` to identify doctors vs. the full name.\n\nNow that we have a final cleaned up `open_payments` data frame, let's remove the other data frames from our environment.  \n\n\n::: {.cell document='show'}\n\n```{.r .cell-code}\nrm(open_payments_original, open_payments_dates_cleaned)\n```\n:::\n\n\n...and on to analysis. \n\n## Data Analysis\n\nUltimately, our aim is to produce a number of tables and plots *for each of the ten MA-based doctors that received the most money from medical drug and device manufacturers in 2021.* This means that one of our first analysis steps is to identify those 10 medical practitioners. \n\n###### Question\n\n::: question\n\nWrite code to determine the 10 medical practitioners that received the most money from drug and device manufacturers in 2021, and store your results in `top_10_doctors`. Your final data frame should have 10 rows and columns for `covered_recipient_npi` and `sum_total_payments`. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment below and write data wrangling code\n\n#top_10_doctors <- open_payments |>\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\nRight now the values that we will eventually want to iterate over in our analysis are stored as columns in a dataframe. ...but remember that the family of `purrr` functions allows us to apply a function to each element of a vector or list. We want to create a series of vectors from these columns that we can iterate over. We will use the `pull()` function to do this. \n\n###### Question\n\n::: question\n\nCreate a vector of `top_10_doctors_ids` from `top_10_doctors`, using the `pull()` function. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment and write code below to pull the top 10 doctor IDs into a vector\n\n# top_10_doctors_ids <- top_10_doctors |>\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\nWe also want a vector of doctor names associated with each of these IDs, but remember that there can be multiple names for a single doctor in this dataset. With this in mind, we are going to create a vector of the **first listed name** for a given `covered_recipient_npi` in the dataset. Taking the first listed name as the doctor's name is an imperfect solution. The first listed name could be a misspelling. It could be a doctor's maiden name that they have since changed. This is a temporary solution, and we would want to confirm that we have the correct name for each doctor before publishing any of these findings. \n\n###### Question\n\n::: question\n\nCreate a vector containing the names of the doctors associated with the IDs in `top_10_doctors_ids`. First, define the function `get_doctor_name`. This function will:\n\n  1.  take a `doctor_id` as an argument, \n  2.  filter `open_payments` to that ID, \n  3.  summarize the `first()` `covered_recipient_full_name` listed for that ID,\n  4. `pull()` the name value\n  \nOnce this function has been defined, select the appropriate `map()` function to iterate `top_10_doctors_ids` through `get_doctor_name` and store the resulting **character vector** in `top_10_doctors_names`. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_doctor_name <- function(doctor_id){\n  # Write function code here\n}\n\n# Iterate the top_10_doctors_ids vector through get_doctor_name and store the results in a character vector\n\n# top_10_doctors_names <- \n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n######\n\nNow that we have the vectors we want to iterate over, we are ready to start defining our first functions. \n\n### What kind of payments did MA-based doctors receive in 2021?\n\nTo get started, let's define a function that filters `open_payments` to a given doctor ID, and then calculates how much of each kind of payment has been paid to that doctor. Here is an example of what that data wrangling code would look like for a specific `covered_recipient_npi`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_payments |>\n  filter(covered_recipient_npi == 1194763482) |>\n  group_by(nature_of_payment_or_transfer_of_value) |>\n  summarize(num_payments = \n              sum(number_of_payments_included_in_total_amount),\n            total_payments = sum(total_amount_of_payment_usdollars))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"nature_of_payment_or_transfer_of_value\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"num_payments\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"total_payments\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Consulting Fee\",\"2\":\"4\",\"3\":\"5427.5\"},{\"1\":\"Royalty Or License\",\"2\":\"2\",\"3\":\"18750000.0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n###### Question\n\n::: question\n\nWrap the above code in a function named `calculate_payment_type_amts`. Rather than filtering to 1194763482, filter based on the value passed to an argument named `doctor_id`.\n\nThen, use the `map()` function to apply `calculate_payment_type_amts` to each element in the `top_10_doctors_ids` vector. Running this code should return a list of 10 data frames. \n\nFinally, pipe in `set_names(top_10_doctors_names)` to set the names for each data frame in the list to the doctor's name.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write calculate_payment_type_amts function here\n\n# Iterate calculate_payment_type_amts over top_10_doctors_ids and set names to top_10_doctors_names\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\n### When were payments made to each of these doctors in 2021? \n\nHere's an example of a plot we could create to answer this question for one doctor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  open_payments |>\n    filter(covered_recipient_npi == 1194763482) |>\n    ggplot(aes(x = day(date_of_payment), \n               y = \"\", \n               fill = total_amount_of_payment_usdollars)) +\n    geom_jitter(pch = 21, size = 2, color = \"black\") +\n    theme_minimal() +\n    labs(title = \"David Friedman\", \n         y = \"\", \n         x = \"Day\",\n         fill = \"Payment Amount\") +\n    scale_y_discrete(limits = rev) +\n    scale_fill_distiller(palette = \"BuPu\", direction = 1, labels = scales::comma) +\n    facet_wrap(vars(month(date_of_payment, label = TRUE)), nrow = 4) \n```\n\n::: {.cell-output-display}\n![](lab8_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n###### Question\n\n::: question\n\nWrite a function named `payments_calendar`. The function should:\n\n  1. Take a `doctor_id` and `doctor_name` as arguments\n  2. Filter `open_payments` to the doctor's ID\n  3. Create payment calendar plot modeled after the one above. \n  4. Set the title of the plot to the doctor's name\n  \nAfter you've written this function, select the appropriate map function to apply `payments_calendar` to each element in the `top_10_doctors_ids` vector and `top_10_doctors_names` vector. \n\n> Optional Challenge: Extend your code to include the first listed specialty for each top 10 doctor as a subtitle in each plot. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write payments_calendar function here\n\n# Iterate payments_calendar over top_10_doctors_ids and top_10_doctors_ids to create 10 plots\n```\n:::\n\n::: {.cell document='solutions'}\n\n:::\n\n\n#######\n\n### Which manufacturers paid MA-based doctors in 2021, and through what forms of payment?\n\nFinally, let's define a function that filters `open_payments` to a given doctor ID and determines how much the doctor received in compensation from different manufacturers, along with the forms of payment from each manufacturer. To do so, we will need to aggregate the data by `covered_recipient_npi`, `applicable_manufacturer_or_applicable_gpo_making_payment_name`, and `form_of_payment_or_transfer_of_value ` and calculate the total payments associated with each grouping.\n\n###### Question\n\n::: question\n\nWrite a function named `calculate_manufacturer_payments`. The function should:\n\n  1. Take a `doctor_id` as an argument\n  2. Filter `open_payments` to that ID\n  3. Aggregate the filtered data by `covered_recipient_npi`,\n             `applicable_manufacturer_or_applicable_gpo_making_payment_name`, and\n             `form_of_payment_or_transfer_of_value `\n  4. Calculate the total amount of payments for each grouping\n  5. Sort the resulting data frame in descending order by the total amount of payments. \n\nAfter you've written this function, use the `map_df()` function to apply `calculate_manufacturer_payments` to each element in the `top_10_doctors_ids` vector. Note how this returns one data frame rather than a list of 10 data frames. \n\nPlot your resulting data frame as a column plot, attempting (to the best of your ability) to match the formatting of the plot below.\n\n> Optional Challenge: List the doctor's full name in each facet band, rather than the the doctor's ID. \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write calculate_manufacturer_payments function here\n\n# Iterate calculate_manufacturer_payments over top_10_doctors_ids here\n\n# Plot resulting data frame here\n```\n:::\n\n::: {.cell document='solutions'}\n::: {.cell-output-display}\n![](lab8_files/figure-html/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n#######\n\n\n::: callout-caution\n## Ethical Considerations\n\nOn September 29, 2022, California Governor Gavin Newsom signed a bill requiring that all physicians and surgeons notify patients about the Open Payments database on their initial visit. Specifically, patients will be given the following notice:  \"The Open Payments database is a federal tool used to search payments made by drug and device companies to physicians and teaching hospitals. It can be found at https://openpaymentsdata.cms.gov,\" and will be prompted to sign and date that they have received the notice. \nThis policy was developed in response to concerns that, while the Open Payments database includes a great deal of information that might impact how citizens make decisions about their healthcare, very few people knew of the database. Do you think this is a good solution to this problem? Should other states follow suit? Do you see any drawbacks to this policy? Share your ideas on our `sds-192-discussions` Slack channel.\n\n:::\n\n\n\n",
    "supporting": [
      "lab8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}