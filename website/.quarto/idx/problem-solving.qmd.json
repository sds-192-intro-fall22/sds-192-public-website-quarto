{"title":"Problem Solving","markdown":{"yaml":{"title":"Problem Solving","author":"Lindsay Poirier","format":"html","editor":"visual"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis lab will introduce you to resources and techniques for problem solving in `R`. You should reference this lab often throughout the semester for reminders on best practices for addressing errors and getting help.\n\n### Learning Goals\n\n-   Interpret error messages in `R`\n-   Read `R` cheatsheets\n-   Access `R` help pages\n-   Reference Stack Overflow and other online resources for help\n\n## Interpreting Error Messages\n\nThroughout this week, we have taken a look at different error messages that `R` presents when it can't evaluate our code. Today, we will consider these in more detail. First, it's important to make some distinctions between the kinds of messages that `R` presents to us when attempting to run code:\n\nErrors\n\n:   Terminate a process that we are trying to run in R. They arise when it is not possible for `R` to continue evaluating a function.\n\nWarnings\n\n:   Don't terminate a process but are meant to warn us that there may be an issue with our code and its output. They arise when `R` recognizes potential problems with the code we've supplied.\n\nMessages\n\n:   Also don't terminate a process and don't necessarily indicate a problem but simply provide us with more potentially helpful information about the code we've supplied.\n\nCheck out the differences between an error and a warning in `R` by reviewing the output in the Console when you run the following code chunks.\n\n#### Error in `R`\n\n```{r, error=TRUE}\nsum(\"3\", \"4\")\n```\n\n#### Warning in `R`\n\n```{r, warning=TRUE}\nvector1 <- 1:5\nvector2 <- 3:6\nvector1 + vector2\n```\n\nSo what should you do when you get an error message? How should you interpret it? Luckily, there are some clues and standardized components of the message the indicate why `R` can't execute the code. Consider the following error message that you received when running the code above:\n\nError in sum(\"3\", \"4\") : invalid 'type' (character) of argument\n\nThere are three things we should pay attention to in this message:\n\n1.  The word \"Error\" indicates that this code **did not** run.\n2.  The text immediately after the word \"in\" tells us which specific function did not run.\n3.  The text after the colon gives us clues as *why* the code did not run.\n\nReviewing the error above, I can guess that there was a problem with the argument that I supplied to the `sum()` function, and specifically that I supplied a function of the wrong type.\n\n::: callout-important\n## Exercise 1\n\nRun the codes below and check out the error messages. Review the code to fix each of the errors. Note that each subsequent code chunk relies on the previous code chunk, so you will need to fix the errors in order and run the chunks in order.\n:::\n\n```{r, error=TRUE}\n# Create three vectors\na <- 1, 2, 3, 4, 5\nb <- \"a\", \"b\", \"c\", \"d\", \"e\"\nc <- TRUE, FALSE, TRUE, TRUE, FALSE\n```\n\n```{r, error=TRUE}\n# Add the values in the vector a\na_added <- add(a)\n```\n\n```{r, error=TRUE}\n# Multiply the previous output by 3\nthree_times_a_added <- added_a * 3\n```\n\n```{r, error=TRUE}\n# Create a dataframe with col1 and col2\ndf <- data.frame(\n  col1 = c(1, 2, 3)\n  col2 = c(\"a\", \"b\", \"c\")\n```\n\n```{r, error=TRUE}\n# Add a new column to df\ndf$col3 <- c(TRUE, FALSE)\n```\n\n## Preparing to Get Help\n\nWhen we do get errors in our code and need to ask for help in interpreting them, it's important to provide collaborators with the information they need to help us. Sometimes when teaching `R` I will hear things like: \"My code doesn't work!\" or \"I'm stuck and don't know what to do,\" and it can be challenging to suss out the root of the issue without more information. Here are some strategies for describing issues you are having with your code:\n\n1.  Reference line numbers. Notice the left side of this document has a series of numbers listed vertically next to each line? These are known as line numbers. Oftentimes, if you are having an issue with your code and ask me to review it, I will say something like: \"Check out line 53.\" By this I mean that you should scroll the document to the 53rd line. You can similarly tell me or your peers which line of your code you are struggling with.\n\n2.  Compose good reproducible examples. A good reproducible example includes all of the lines of code that we need to reproduce an output on our own machines. This means that if you create a vector in a previous code snippet and then supply it as an argument in another code snippet, you are going to want to make sure that both of these lines of code appear in your reproducible example. Further, if the functions that you are using are from certain packages, you will want to make sure the `library()` call to load that package is in your reproducible example.\n\n3.  Use the code and code block buttons in Slack to share example code. First, when we copy and paste code from RStudio into programs like Slack and email, we can't see the output. Second, certain characters like quotation marks and apostrophes are treated differently across these programs. For example, run the code chunk below and check out the output in your Console. The first line of code I typed directly into RStudio. The second I copied over from Slack.\n\n```{r, error=TRUE}\n# typed directly into RStudio\ntoupper(\"apple\")\n# copied from Slack\ntoupper(“apple”)\n```\n\nNotice the slight differences in the quotation marks? `R` recognizes the first but doesn't recognize the second, even though I used the same keyboard key to create both. This is due to the fact that these two systems use different character encodings.\n\nThe Code button (for a single line of code) and Code Block button (for multiple lines of code) in Slack are useful tools for composing code and avoiding character encoding issues. If you click these buttons when typing a Slack message, you can enter code in the red outlined box that appears, and this will easily copy to RStudio. I will ask you to always use these features when copying code this semester.\n\n::: callout-tip\nIn Slack, you can also wrap text backticks (\\` \\`) to have it output in a single-line code block, and three backticks (\\`\\`\\` \\`\\`\\`) to have it output as a multi-line code block.\n:::\n\n::: callout-important\n## Exercise 2\n\nCopy and paste one line of code from this lab **as a threaded comment** on the Slack message I posted on September 7, 2022. Be sure the text is formatted as code.\n:::\n\n# Referencing Resources\n\nAs I've mentioned in class before, I don't expect you to come away from this class memorizing every function that we discuss and all of their parameters. There are a number of resources available to help you recall how certain functions work.\n\n## Help pages\n\nOne resource we've already discussed are the `R` help pages. I tend to use the help pages when I know the function I need to use, but can't remember how to apply it or what its parameters are. Help pages typically include a description of the function, its arguments, details about the function, the values it produces, a list of related functions, and examples of its use. We can access the help pages for a function by typing the name of the function with a question mark in front of it into our Console (e.g. `?log` or `?sum`). Some help pages are well-written and include helpful examples, while others are spotty and don't include many examples.\n\n::: callout-important\n## Exercise 3\n\nAccess the help pages for the function `sort()`. Write code below to sort the vector `a` (which you created in an earlier step) in decreasing order.\n:::\n\n```{r}\n# Write code here. \n```\n\n## Cheatsheets\n\nThe `R` community has developed a series of cheatsheets that list the functions made available through a particular package and their arguments. I tend to use cheatsheets when I know what I need to do to a dataset in R, but I can't recall the function that enables me to do it.\n\n::: callout-important\n## Exercise 4\n\nNavigate to [this cheatsheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf) for base `R`. Imagine we collected the temperature of our home each day for the past ten days (see code below). Let's say we wanted to find how each day ranked from coolest to hottest. For instance, I wanted to know the ranking for day 1 vs. day 2 vs. day 3, and so on. Using the cheatsheet, find the function that will allow you to generate a ranking of each day's temperature. Search the help pages for this function to determine how to randomly rank two days with the same temperature. Write a comment to yourself describing how this function is different than sorting the data.\n:::\n\n```{r}\n#Create a vector of temperatures\ntemps_to_factor <- c(68, 70, 78, 75, 69, 80, 66, 66, 79)\n\n# Write code below to rank the days with random ties\n\n\n# Replace this line with a comment to yourself describing how this function is different than sorting the data. \n```\n\n# Searching the Web\n\nI encourage you to search the web when you get errors in your code. Others have likely experienced that error before and gotten help from communities of data analysts and programmers. However, you should **never copy and paste code directly from Stack Overflow**. This violates the course policies on Academic Honesty. Instead you should use these resources to take notes and learn how to improve and revise code. Any time you reference Stack Overflow or any other Web resource to help you figure out an answer to a problem, you should cite that resource in your code. Here is how you would cite that post in APA format:\n\n> Username. (Year, Month Date). *Title of page (Question/Topic)*. Stack Overflow. URL\n\n::: callout-important\n## Exercise 5\n\nAdd a comment to the code chunk above, citing [this Stack Overflow](https://stackoverflow.com/questions/54017285/difference-between-sort-rank-and-order) post. Be sure to cite the post properly. You can read through the post to double check your answers.\n:::\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"problem-solving.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"0.9.342","theme":"flatly","toc_float":{"collapsed":true,"smooth_scroll":false},"highlight":"tango","lib_dir":"libs","title":"Problem Solving","author":"Lindsay Poirier","editor":"visual"},"extensions":{"book":{"multiFile":true}}}}}