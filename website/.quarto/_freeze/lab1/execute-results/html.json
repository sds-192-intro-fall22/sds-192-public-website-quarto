{
  "hash": "1ef738a080819ed519b668653a7163d4",
  "result": {
    "markdown": "---\ntitle: \"Lab 1: Understanding Datasets\"\nauthor: \"Lindsay Poirier\"\nformat: html\neditor: visual\n---\n\n## Introduction\n\nThis lab is all about learning to understand the context and parts of a dataset. In the process of practicing these skills, you will also learn about how to problem solve when coding in `R`.\n\n### Learning Goals\n\n-   Read a data dictionary\n\n-   Reference data documentation\n\n-   Identify unique observations in a dataset\n\n-   Understand different variable types and the kinds of operations you would preform on them\n\n## Review of Key Terms\n\nIn this course, we will be working entirely with *rectangular datasets* - i.e. datasets in which all rows are the same length, and all columns are the same length.\n\n### How do we refer to the parts of a rectangular dataset?\n\n**We refer to each row in a dataset as an *observation* and each column in a dataset as a *variable*.** This is because rows refer to something that we see in the world, and columns describe that thing we are seeing. Imagine we have a table like this below.\n\n| Name  | Age | Birth Month | Time on Phone |\n|-------|-----|-------------|---------------|\n| Sally | 23  | 3           | 42            |\n| Julie | 40  | 2           | 98            |\n| Mark  | 14  | 8           | 120           |\n\nEach row is an observation - in this case a person - and each column is a variable describing something about a person.\n\n### What are the technical components of a rectangular dataset in `R`?\n\nYou may recall that in `R`, *vectors* are a one-dimensional set of values that are all of the same type. A vector can be of type integer (non-decimal numbers), double (decimal numbers), characters (letters and symbols), logical (TRUE/FALSE), for example. Because all of the values in a vector are of the same type, we can perform certain operations across all of the values stored in a vector (e.g. adding all the numbers in a vector up or pasting all of the characters in a vector together). Note how we create a vector of numeric values below, check its type, and then perform an operation on it:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note how we create a vector by listing the values in `c()`\ntime_on_phone <- c(42, 98, 120)\n\n# We check the data type like this. \ntypeof(time_on_phone)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\n# We sum the values in the vector like this. \nsum(time_on_phone)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 260\n```\n:::\n:::\n\nWhen we create or import rectangular datasets into `R`, they will be stored as a *data frame*. In a data frame, each column is technically a vector, and the name of that vector corresponds to the column's name. So in the table we created above, the Name column is a character vector of names, the Age column is a numeric vector of ages.\n\n::: callout-important\nI use the letters `df` as a placeholder to refer to an arbitrary data frame in `R`. Any time that I refer to `df` in a lab, know that you can swap out `df` with any data frame in your environment.\n:::\n\nRectangular Datasets\n\n:   datasets in which all rows are the same length, and all columns are the same length\n\nObservations\n\n:   rows in a dataset\n\nVariables\n\n:   columns in a dataset; describe something about an observation\n\nVector\n\n:   one-dimensional set of values that are all of the same type\n\nData Frame\n\n:   a list of vectors of equal lengths; typically organizes data into a two-dimensional table composed of columns (the vectors) and rows\n\nUnique Key\n\n:   variable (column) in the dataset that can be used to uniquely identify each row\n\n## Scorecard Dataset\n\nIn his 2013 State of the Union Address, President Barack Obama announced his plans to create a \"college scorecard\" that would allow prospective students and parents to compare schools in terms of cost, offerings, diversity, completion rates, and post-graduate earnings. This data was first published in 2015 and since has undergone several improvements and revisions.\n\nThe College Scorecard dataset is *massive*. In fact, I thought long and hard about whether this was really the first dataset I wanted to introduce to you in a lab. It includes information about over \\_\\_\\_\\_\\_ institutions in the U.S., and has more than 3000 columns documenting information about those institutions. I chose this dataset for this lab because, if you can learn to read this data dictionary, you will be leaps and bounds ahead of the game in learning to read other data dictionaries. (It's also just a super cool dataset, and hint, hint: you will get a chance to dive into it in much more detail in a few weeks). While the full data is available online, we are only going to work with a small subset of the data today.\n\n## Setting Up Your Environment\n\n1.  Install the RScorecard package by entering the following into your Console: `install.packages(\"rscorecard\")`\n\n2.  Create a Scorecard API Key at [this link](https://api.data.gov/signup/). Shortly after you fill out the form, you will be emailed a key. Copy that key into code chunk below. Be sure to wrap the key in quotation marks.\n\n3.  Download the Scorecard Data Dictionary and Technical Documentation for Institution-Level Data Files [here](https://collegescorecard.ed.gov/data/documentation/).\n\n4.  Run the code below to the import 2018 Scorecard data for Massachusetts into `R`. Call me or one of the data assistants over if you get an error.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(rscorecard)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rscorecard' was built under R version 4.1.2\n```\n:::\n\n```{.r .cell-code}\nsc_key(Sys.getenv(\"SCORECARD_KEY\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDATAGOV_API_KEY environment variable now set. You may now use sc_get() without specifying a key.\n```\n:::\n\n```{.r .cell-code}\nscorecard <- sc_init() %>%\n  sc_year(2018) %>%                 #Note how we are looking at only 2021 data here!\n  sc_filter(stabbr == \"MA\") %>%     #Note how we are looking at only Massachusetts data here!\n  sc_select(unitid, instnm, city, highdeg, control, adm_rate, costt4_a, costt4_p, pcip27, pctfloan, admcon7, wdraw_orig_yr2_rt, cdr3, ugds_white, ugds_black) %>%\n  sc_get()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLarge request will require: 1 additional pulls.\nRequest additional chunk 1\nRequest complete!\n```\n:::\n:::\n\n## Glimpsing the Data\n\nWhen working with very large datasets, we need tools to help us get a sense of the dataset without having to load the entire data frame. For instance, we can view the first 6 rows of the dataset by calling `head()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nscorecard %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 16\n  unitid instnm     city  highdeg control adm_r…¹ costt…² costt…³ pcip27 pctfl…⁴\n   <int> <chr>      <chr>   <int>   <int>   <dbl>   <int>   <int>  <dbl>   <dbl>\n1 164368 Hult Inte… Camb…       4       2   0.571   60090      NA 0       0.0566\n2 164447 American … Spri…       4       2   0.684   47742      NA 0       0.833 \n3 164465 Amherst C… Amhe…       3       2   0.128   71300      NA 0.110   0.166 \n4 164492 Anna Mari… Paxt…       4       2   0.736   51109      NA 0       0.746 \n5 164535 Assabet V… Marl…       1       1   0.452      NA   19703 0       0.429 \n6 164562 Assumptio… Worc…       4       2   0.811   53303      NA 0.0162  0.704 \n# … with 6 more variables: admcon7 <int>, wdraw_orig_yr2_rt <dbl>, cdr3 <dbl>,\n#   ugds_white <dbl>, ugds_black <dbl>, year <dbl>, and abbreviated variable\n#   names ¹​adm_rate, ²​costt4_a, ³​costt4_p, ⁴​pctfloan\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n`str()` provides a great deal of information about the observations in the data frame, including the number of variables, the number of observations, the column names, their data types, and a list of observations.\n\n::: {.cell}\n\n```{.r .cell-code}\nscorecard %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [153 × 16] (S3: tbl_df/tbl/data.frame)\n $ unitid           : int [1:153] 164368 164447 164465 164492 164535 164562 164580 164599 164614 164632 ...\n $ instnm           : chr [1:153] \"Hult International Business School\" \"American International College\" \"Amherst College\" \"Anna Maria College\" ...\n $ city             : chr [1:153] \"Cambridge\" \"Springfield\" \"Amherst\" \"Paxton\" ...\n $ highdeg          : int [1:153] 4 4 3 4 1 4 4 1 3 4 ...\n $ control          : int [1:153] 2 2 2 2 1 2 2 3 2 2 ...\n $ adm_rate         : num [1:153] 0.571 0.684 0.128 0.736 0.452 ...\n $ costt4_a         : int [1:153] 60090 47742 71300 51109 NA 53303 68482 NA 26691 46315 ...\n $ costt4_p         : int [1:153] NA NA NA NA 19703 NA NA NA NA NA ...\n $ pcip27           : num [1:153] 0 0 0.11 0 0 ...\n $ pctfloan         : num [1:153] 0.0566 0.8333 0.1661 0.7464 0.4286 ...\n $ admcon7          : int [1:153] 3 5 1 3 3 3 1 NA 1 5 ...\n $ wdraw_orig_yr2_rt: num [1:153] NA 0.181 0.124 0.129 NA ...\n $ cdr3             : num [1:153] 0.043 0.073 0.014 0.073 0.065 0.044 0.019 0.06 0.024 0.048 ...\n $ ugds_white       : num [1:153] 0.0314 0.3787 0.435 0.6401 0.48 ...\n $ ugds_black       : num [1:153] 0.0087 0.2211 0.1073 0.1415 0.38 ...\n $ year             : num [1:153] 2018 2018 2018 2018 2018 ...\n```\n:::\n:::\n\nYou can also click on the name of your data frame in your Environment panel in RStudio, and it will open a new tab in RStudio that displays the data in a tabular format. Try clicking on `scorecard` in your Environment panel.\n\n::: callout-tip\nThis is the same as calling `df %>% View()` in your Console.\n:::\n\nNote the column names for this dataframe, and the kinds of values that appear in those columns. Some of them (like `city` and `year`) might make sense to you immediately. Others (like `pcip27` and `highdeg`) might be much more confusing. To figure out what we are looking out, we are going to need to refer to the dataset's data dictionary.\n\n## Getting to Know this Dataset\n\n### Observations (Rows)\n\nIn starting our data analysis, we need to have a good sense of what each observation in our dataset refers to - or its *observational unit*. Think of it this way. If you were to count the number rows in your dataset, what would that number refer to? A *unique key* is a variable (or set of variables) that uniquely identifies an observation in the dataset. Think of a unique key as a unique way to identify a row and all of the values in it. There should never be more than one row in the dataset with the same unique key. A unique key tells us what each row in the dataset refers to.\n\n::: callout-important\n## Exercise 1\n\nSee if you can identify a unique key for this dataset. Write some lines of code to determine whether the column you've identified can act as unique key for the data. Hint: You need to check whether the values in the column ever repeat.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write code to check if values in column are all unique here.\n```\n:::\n\n::: callout-tip\nNote that NAME is typically not an appropriate variable to use as a unique key. Let me provide an example to demonstrate this. When I worked for BetaNYC, I was trying to build a map of vacant storefronts in NYC by mapping all commercially zoned properties in the city, and then filtering out those properties where a business was licensed or permitted. This way the map would only include properties where there wasn\\'t a business operating. One set of businesses I was filtering out was restaurants. The only dataset that the city had made publicly available for restaurant permits was broken. It was operating on an automated process to update whenever there was a change in the permit; however, whenever a permit was updated, rather than updating the appropriate fields in the existing dataset, it was creating a new row in the dataset that only included the permit holder (the restaurant name), the permit type, and the updated fields. Notably the unique permit ID was not being included in this new row. We pointed this issue out to city officials, but fixing something like this can be slow and time-consuming, so in the meantime, we looked into whether we could clean the data ourselves by aggregating the rows that referred to the same restaurant. However, without the permit ID it was impossible to uniquely identify the restaurants in the dataset. Sure, we had the restaurant name, but do you know how many Wendy\\'s there are in NYC?\n:::\n\nAnytime we count something in the world, we are not only engaging in a process of tabulation; we are also engaging in a process of defining. If I count the number of students in a class, I first have to define what counts as a student. If someone is auditing the class, do they count? If I, as the instructor, am learning from my students, do I count myself as a student? As I make decisions about how I\\'m going to define \"student,\" those decisions impact the numbers that I produce. When I change my definition of \"student,\" how I go about tabulating students also changes. Thus, as we prepare to count observations in a dataset, it is important to know how those observations are defined.\n\n::: callout-important\n## Exercise 2\n\nAt this point, you've probably figured out that each row in this dataset is a higher education institution. ...but there are many different ways that we can define higher education institutions, and that will impact what gets included and excluded in our data. Referencing the Technical Documentation, locate a definition for the unit of observation in this dataset. What institutions are included, and what institutions are excluded? Summarize a definition below.\n:::\n\n> Summarize definition here.\n\n### Variables (Columns)\n\nOpen the data dictionary you downloaded in an earlier step. It will open as an Excel file. Click on the tab labeled \"Institution_Data_Dictionary\". There are thousands of variables in this dataset, falling into the broader categories of school, completion, admissions, cost, etc. Note how the file is organized, and specifically draw your attention to:\n\n-   Column 1 (NAME OF DATA ELEMENT): This is a long description of the variable and gives you clues as to what is represented in it.\n\n-   Column 6 (VARIABLE NAME): This is the column name for the variable. This is how you will reference the variable in `R`.\n\n-   Column 7 (VALUE): These are the possible values for that variable. Note that for many categorical variables, the values are numbers. We are going to have to associate the numbers with their corresponding labels.\n\n-   Column 8 (LABEL): These are the labels associated with the values recorded for the variable.\n\n-   Column 11 (NOTES): This provides notes about the variable, including whether it is currently in use and what missing values indicate.\n\n::: callout-important\n## Exercise 3\n\nIdentify one nominal variable, one ordinal variable, one discrete variable, and one continuous variable.\n:::\n\n### Values (Cells)\n\n::: callout-important\n## Exercise 4\n\nRecode/factor ordinal variable\n:::\n\n::: callout-important\n## Exercise 5\n\nCut numeric variable into buckets and label them\n:::\n\n### Missing Values\n\n::: callout-important\n## Exercise 6\n\nDetermine the number of missing values in \\_\\_.\n:::\n\n::: callout-caution\n## Ethical Considerations\n\nReferencing the College Scorecard data documentation, see if you can determine which students are included in calculations of earnings and debt. How might the data's coverage bias the values that get reported? What might be the social consequences of these biases? Share your ideas on our \\`sds-192-discussions\\` Slack channel.\n:::",
    "supporting": [
      "lab1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}